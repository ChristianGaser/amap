#! /bin/sh

########################################################
# global parameters
########################################################
version='parallelize_xserves $Id$'

COMMAND=""
XSERVES="141.35.68.68 141.35.68.71 141.35.68.72 141.35.68.73 141.35.68.74 141.35.68.75"

########################################################
# run main
########################################################

main ()
{
  parse_args ${1+"$@"}
  check_files
  parallelize_xserves

  exit 0
}

########################################################
# check arguments and files
########################################################

parse_args ()
{
  local optname optarg
  count=0
  while [ $# -gt 0 ]
  do
    optname="`echo $1 | sed 's,=.*,,'`"
    optarg="`echo $2 | sed 's,^[^=]*=,,'`"
    case "$1" in
        --command* | -c*)
            exit_if_empty "$optname" "$optarg"
            COMMAND=$optarg
            shift
            ;;
        --server* | -s*)
            exit_if_empty "$optname" "$optarg"
            XSERVES=$optarg
            shift
            ;;
        -h | --help | -v | --version | -V)
            help
            exit 1
            ;;
        -*)
            echo "`basename $0`: ERROR: Unrecognized option \"$1\"" >&2
            ;;
        *)
            ARRAY[$count]=$1
            ((count++))
            ;;
    esac
    shift
  done

}

########################################################
# check arguments
########################################################

exit_if_empty ()
{
  local desc val

  desc="$1"
  shift
  val="$*"

  if [ -z "$val" ]
  then
    echo ERROR: "No argument given with \"$desc\" command line argument!" >&2
    exit 1
  fi
}

########################################################
# check files
########################################################

check_files ()
{
  if [ -z "$COMMAND" ];
  then
    echo "$FUNCNAME ERROR - no command defined."
      help
    exit 1
  fi
  
  SIZE_OF_ARRAY="${#ARRAY[@]}"
  if [ "$SIZE_OF_ARRAY" -eq 0 ]
  then
      echo 'ERROR: No files given!' >&2
      help
      exit 1
  fi

  i=0
  while [ "$i" -lt "$SIZE_OF_ARRAY" ]
  do
    if [ ! -f "${ARRAY[$i]}" ] && [ ! -d "${ARRAY[$i]}" ]; then
      echo ERROR: File or directory ${ARRAY[$i]} not found
      help
      exit 1
    fi
    ((i++))
  done

}

########################################################
# run parallelize_xserves
########################################################

parallelize_xserves ()
{

  NUMBER_OF_SERVERS=0
  for k in ${XSERVES}; do
    ((NUMBER_OF_SERVERS++))
  done

  SIZE_OF_ARRAY="${#ARRAY[@]}"
  BLOCK=$((10000* $SIZE_OF_ARRAY / $NUMBER_OF_SERVERS ))

  i=0
  while [ "$i" -lt "$SIZE_OF_ARRAY" ]
  do
    count=$((10000* $i / $BLOCK ))
    if [ -z "${ARG_LIST[$count]}" ]; then
      ARG_LIST[$count]="${ARRAY[$i]}"
    else
      ARG_LIST[$count]="${ARG_LIST[$count]} ${ARRAY[$i]}"
    fi
    ((i++))
  done
    
  i=0
  for x in ${XSERVES};
  do
    if [ ! "${ARG_LIST[$i]}" == "" ]; then
      j=$(($i+1))
      echo job ${j}/"$NUMBER_OF_SERVERS":
      echo $COMMAND ${ARG_LIST[$i]}
      ssh ${x} "bash -c $COMMAND ${ARG_LIST[$i]}"
    fi
    ((i++))
  done

}

########################################################
# help
########################################################

help ()
{
cat <<__EOM__

USAGE:
  parallelize_xserves [-s server] -c command_to_parallelize_xserves filename|filepattern
  
   -c   command that should be parallelized
   -s   server list

   Only one filename or pattern is allowed. This can be either a single file or a pattern
   with wildcards to process multiple files. Optionally you can set number of processes,
   that are automatically set to the number of processors as default.

PURPOSE:
   parallelize_xserves a job or command

OUTPUT:

EXAMPLE
   parallelize_xserves -c "niismooth -v -fwhm 8" sTRIO*.nii
   smoothing with fwhm of 8mm for all files sTRIO*.nii. Use verbose mode to see diagnostic output.
   
   parallelize_xserves -s "141.35.68.68 141.35.68.71 141.35.68.72 141.35.68.73" -c "/Volumes/UltraMax/spm8/toolbox/vbm8/cg_vbm8_batch.sh -w -m /usr/local/bin/matlab" /Volumes/UltraMax/ADNI/*sc*/ADNI*.nii
   VBM8 batch for all files in /Volumes/UltraMax/ADNI/*sc*/ADNI*.nii with 4 servers 141.35.68.68 141.35.68.71 141.35.68.72 141.35.68.73 

   parallelize_xserves -c "/Volumes/UltraMax/spm8/toolbox/vbm8/cg_vbm8_batch.sh -p 4 -d /Volumes/UltraMax/cg_vbm8_defaults_rp1_affine.m -m /usr/local/bin/matlab" /Volumes/UltraMax/ADNI/*sc*/ADNI*.nii
   VBM8 batch for all files in /Volumes/UltraMax/ADNI/*sc*/ADNI*.nii with 4 parallel jobs and optional default file 

   parallelize_xserves -c "/Volumes/UltraMax/bin/parallelize -c /Volumes/UltraMax/niismooth" /Volumes/UltraMax/IXI-database/raw/rp1IXI*nii

   parallelize_xserves -s "141.35.68.68 141.35.68.71 141.35.68.73 141.35.68.74 141.35.68.75" -c "/Volumes/UltraMax/bin/parallelize -l /Volumes/UltraMax -c /Volumes/UltraMax/subjects/recon-all-cg-no_skullstripping" /Volumes/UltraMax/MEDI_50_50/data/[MU]*.img
   recon-all files in /Volumes/UltraMax/MEDI_50_50/data/[MU]*.img and save log-files in /Volumes/UltraMax

This script was written by Christian Gaser (christian.gaser@uni-jena.de).
This is ${version}.

__EOM__
}

########################################################
# call main program
########################################################

main ${1+"$@"}

